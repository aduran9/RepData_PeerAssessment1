ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdY("jun 17, 2008", tz = "Singapore")
last_time <- mdY("June 17, 2008", tz = "Singapore")
last_time <- mdY("June 17, 2008")
last_time <- mdy("jun 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval()
?interval
how_long <- interval(start = arrive, end = last_time)
how_long <- interval(start = last_time, end = arrive)
as.period(how_long)
stopwatch
stopwatch()
exit
sessionInfo()
if(!file.exists("./04ExplorData/1Week/data")){dir.create("./04ExplorData/1Week/data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(fileUrl, destfile = "./04ExplorData/1Week/data/xxxxx.csv", method = "curl")
pollution <- read.csv("./04ExplorData/1Week/data/avgpm25.csv", colClasses = c("numeric", "character", "factor", "numeric", "numeric")
pollution <- read.csv("./04ExplorData/1Week/data/avgpm25.csv", colClasses = c("numeric", "character", "factor", "numeric", "numeric"))
download.file(fileUrl, destfile = "./04ExplorData/1Week/data/avgpm25.csv", method = "curl")
pollution <- read.csv("./04ExplorData/1Week/data/avgpm25.csv", colClasses = c("numeric", "character", "factor", "numeric", "numeric"))
head(pollution, n = 6)
pollution
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
library(datasets)
hist(airquality$Ozone)
library(datasets)
with(airquality, plot(Wind, Ozone))
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
library(datasets)
with(faithful, plot(eruptions, waiting)) ## Make plot appear on screen device
title(main = "Old Faithful Geyser data")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
?InstallCourses
library(swirl)
swirl()
library("swirl")
swirl()
library("swirl")
swirl()
head()
head(pollution)
dim(pollution)
summary(pollution$pm25)
0
0
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone | as.factor(Month), data = airquality, layout = c(5, 1))
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5, 1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
p <- xplot(Ozone ~ Wind, data = airquality)
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames(myfull)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2, 1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ,
hwy,
data
=
mpg,
geom
=
c("point",
"smooth"))
qplot(hwy,
data
=
mpg,
fill
=
drv)
qplot(displ,
hwy,
data
=
mpg,
facets
=
.
~
drv)
str(maacs)
str(maacs)
str("maacs")
str(maacs)
data.frame()
qplot(log(eno),
data
=
maacs)
install.packages("nlme")
library(lattice)
library(nlme)
plot <- xyplot(weight ~ Time | Diet, BodyWeight)
class(plot)
xyplot(weight ~ Time | Diet, BodyWeight)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
str(movies)
summary(movies)
library(ggplot2)
str(movies)
str(ggplot2movies)
library(ggplot2movies)
clearPushBack()
clear
install.packages(c("broom", "callr", "cli", "clipr", "covr", "cpp11", "data.table", "digest", "DT", "Formula", "htmlwidgets", "knitr", "matrixStats", "openssl", "openxlsx", "ps", "readr", "rlang", "rmarkdown", "RSQLite", "statmod", "tibble", "tinytex", "withr", "xfun"))
install.packages(c("broom", "callr", "cli", "clipr", "covr", "cpp11", "data.table", "digest", "DT", "Formula", "htmlwidgets", "knitr", "matrixStats", "openssl", "openxlsx", "ps", "readr", "rlang", "rmarkdown", "RSQLite", "statmod", "tibble", "tinytex", "withr", "xfun"))
install.packages(c("broom", "callr", "cli", "clipr", "covr", "cpp11", "data.table", "digest", "DT", "Formula", "htmlwidgets", "knitr", "matrixStats", "openssl", "openxlsx", "ps", "readr", "rlang", "rmarkdown", "RSQLite", "statmod", "tibble", "tinytex", "withr", "xfun"))
install.packages(c("broom", "callr", "cli", "clipr", "covr", "cpp11", "data.table", "digest", "DT", "Formula", "htmlwidgets", "knitr", "matrixStats", "openssl", "openxlsx", "ps", "readr", "rlang", "rmarkdown", "RSQLite", "statmod", "tibble", "tinytex", "withr", "xfun"))
install.packages(c("broom", "callr", "cli", "clipr", "covr", "cpp11", "data.table", "digest", "DT", "Formula", "htmlwidgets", "knitr", "matrixStats", "openssl", "openxlsx", "ps", "readr", "rlang", "rmarkdown", "RSQLite", "statmod", "tibble", "tinytex", "withr", "xfun"))
install.packages(c("broom", "callr", "cli", "clipr", "covr", "cpp11", "data.table", "digest", "DT", "Formula", "htmlwidgets", "knitr", "matrixStats", "openssl", "openxlsx", "ps", "readr", "rlang", "rmarkdown", "RSQLite", "statmod", "tibble", "tinytex", "withr", "xfun"))
install.packages(c("broom", "callr", "cli", "clipr", "covr", "cpp11", "data.table", "digest", "DT", "Formula", "htmlwidgets", "knitr", "matrixStats", "openssl", "openxlsx", "ps", "readr", "rlang", "rmarkdown", "RSQLite", "statmod", "tibble", "tinytex", "withr", "xfun"))
install.packages(c("broom", "callr", "cli", "clipr", "covr", "cpp11", "data.table", "digest", "DT", "Formula", "htmlwidgets", "knitr", "matrixStats", "openssl", "openxlsx", "ps", "readr", "rlang", "rmarkdown", "RSQLite", "statmod", "tibble", "tinytex", "withr", "xfun"))
install.packages(c("broom", "callr", "cli", "clipr", "covr", "cpp11", "data.table", "digest", "DT", "Formula", "htmlwidgets", "knitr", "matrixStats", "openssl", "openxlsx", "ps", "readr", "rlang", "rmarkdown", "RSQLite", "statmod", "tibble", "tinytex", "withr", "xfun"))
install.packages("data.table")
library(swirl)
swirl()
colors(sample)
sample(colors(, 10))
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0, 1, len = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
}
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5), alpha = 0.3)
plot(x, y, pch = 19, col = rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
install.packages("broom")
install.packages("statmod")
install.packages("digest")
install.packages("data.table")
install.packages("labeling")
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom =c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(lm)
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g <- ggplot(mpg, aes(displ, hwy)) + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size 0 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size 0 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(- myx, myy, type = "l", ylim = c(-3, 3))
plot(myx, myy, type = "l", ylim = c(-3, 3))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim(-3, 3))
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(data = testdat, aes(x = displ, y = hwy, color = factor(year)))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = dataset)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = . ~ cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
15
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
library (impute)
install.packages("impute")
install.packages("impute")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
x <- rnorm(100000)
y <- rnorm(100000)
smoothScatter(x, y)
smoothScatter(x, y, pch = 19)
smoothScatter(x, y, pch = 19, col = rgb((0, 0, 0, 0.2)))
smoothScatter(x, y, pch = 19, col = rgb(0, 0, 0, 0.2))
plot(x, y, pch = 19, col = rgb(0, 0, 0, 0.2))
library(swirl)
swirl()
dist(data.frame())
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
3
5
abline(h = 0.05, col = "red")
12
abline(h = 0.05, col = "green")
dist(dFsm)
dist(hc)
hc
heatmap(datamatrix, col = cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
q()
library(swirl)
swirl()
names(sub1[maxCon])
kClust <- kmeans(sub1[, -], centers = 6)
kClust <- kmeans(sub1[, -2], centers = 6)
kClust <- kmeans(sub1[, 2], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "laying Cluster")
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[maxCon])
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
leave()
quit()
library(swirl)
swirl()
dim(pm0)
head(pm0)
names(cnames)
print(cnames)
cnames <- strsplit(cnames, "|", fixed = TRUE)
print(cnames)
names(pm0) <- make.names
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersec(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site == %in%)
cnt0 <- subset(pm0, State.Code == 36 & county.site == %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(pm0, State.Code == 36 & County.Code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(dates0), "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE)
abline(h = median(x0sub, na.rm = TRUE))
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(0.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(x, y, x0, y0)
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y, ]
leave()
quit()
library(kernlab)
install.packages(kernlab)
install.packages()
q()
q()
old.dir <- getwd()
old.dir
setwd("./05ExplResearch/Week2/RepData_PeerAssessment1")
